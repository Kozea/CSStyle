#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# This file is part of CSStyle
# Copyright Â© 2010 Kozea
#
# This library is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CSStyle.  If not, see <http://www.gnu.org/licenses/>.

"""
CSStyle Test Suite

"""

import os
import copy
from unittest import TestCase

import csstyle


DATA_FILE = os.path.join(os.path.dirname(__file__), "data")
TEST_FILE = os.path.join(DATA_FILE, "test.css")


def _ignore_characters(unstripped_string):
    """Yield the stripped lines of ``unstripped_string``."""
    new_string = unstripped_string.splitlines()
    for element in new_string:
        element = element.strip(" \r\n\t")
        if element:
            yield element


def _helper(self, keep_existant=False, browser=csstyle.BROWSERS):
    """Test function called by all tests methods."""
    string = "/* Generated by CSStyle */\n\n"
    parser = csstyle.Parser(TEST_FILE)
    for engine in browser:
        browser_parser = getattr(csstyle, engine)
        string += repr(
            browser_parser.transform(copy.deepcopy(parser), keep_existant))
    string = list(_ignore_characters(string))

    # Define to be compared filename
    name = ""
    if keep_existant:
        name = "keep_"
    if browser == csstyle.BROWSERS:
        name += "result_all.css"
    else:
        name += "result_%s.css" % browser[0]
    string_to_compare = list(
        _ignore_characters(open(os.path.join(DATA_FILE, name)).read()))
    self.assertEqual(string_to_compare, string)


# The test class can have many methods
# pylint: disable=R0904

class CSStyleTestCase(TestCase):
    """Test case for CSStyle."""
    def test_parser_all(self):
        """Tests new lines only with all browsers at once."""
        _helper(self)

    def test_parser_webkit(self):
        """Tests new lines only with webkit only."""
        _helper(self, browser=("webkit",))

    def test_parser_gecko(self):
        """Tests new lines only with gecko only."""
        _helper(self, browser=("gecko",))

    def test_parser_presto(self):
        """Tests new lines only with presto only."""
        _helper(self, browser=("presto",))

    def test_keep_parser_all(self):
        """Tests old and new lines with all browsers."""
        _helper(self, True)

    def test_keep_parser_webkit(self):
        """Tests old and new lines with webkit only."""
        _helper(self, True, ("webkit",))

    def test_keep_parser_gecko(self):
        """Tests old and new lines with gecko only."""
        _helper(self, True, ("gecko",))

    def test_keep_parser_presto(self):
        """Tests old and new lines with presto only."""
        _helper(self, True, ("presto",))

# pylint: enable=R0904
